################################################################################
# THIS IS A PUPNET CONF FILE
# PupNet Homepage: https://github.com/kuiperzone/PupNet
################################################################################

########################################
# APP PREAMBLE
########################################

# Mandatory application base name. This MUST BE the base name of the main executable
# file. It should NOT include any directory part or extension, i.e. do not append
# '.exe' or '.dll'. It should not contain spaces or non-alphanumeric characters except '-'.
# Example: HelloWorld
AppBaseName = HelloWorld

# Mandatory application friendly name. Example: Hello World
AppFriendlyName = Hello World

# Mandatory application ID in reverse DNS form. Example: net.example.helloworld
AppId = net.example.helloworld

# Mandatory application version and package release of form: 'VERSION[RELEASE]'.
# Use optional square brackets to denote package release, i.e. '1.2.3[1]'. If release is
# absent (i.e. '1.2.3') the release value defaults to '1'. Note that the value given here
# may be overidden from the command line.
AppVersionRelease = 1.0.0[1]

# Mandatory single line application description. Example: A really good Hello World application
AppSummary = A HelloWorld application

# Mandatory application license name. This should be one of the recognised SPDX license
# identifiers, such as: 'MIT', 'GPL-3.0-or-later' or 'Apache-2.0'. For a properietary or
# custom license, use 'LicenseRef-Proprietary' or 'LicenseRef-LICENSE', or similar.
AppLicense = LicenseRef-Proprietary

# Mandatory application vendor, group or creator. Example: Acme Ltd
AppVendor = The HelloWorld Team

# Optional application or vendor URL. Example: https://example.net
AppUrl = https://example.net

########################################
# INTEGRATION
########################################

# Optional command name to start the application from the terminal. If, for example, AppBaseName
# is 'HelloWorld', the value here may be set to the same or a lower-case 'helloworld' variant.
# If empty, the application name will not be in the path and cannot be started from the command
# line. This value is not supported for AppImage and Flatpak
# and will be ignored. Default is empty.
StartCommand = helloworld

# Optional path to a Linux desktop file (ignored for Windows). If empty (default), one will be
# generated automatically from known application information. A file may be supplied instead to
# provide for mime-types and internationalisation. If supplied, the file MUST contain the line:
# 'Exec=${DESKTOP_EXEC}' in order to use the correct install location. Other macros
# may be used to help automate some content, and include: ${APP_FRIENDLY_NAME}, ${APP_ID},
# ${APP_SUMMARY} etc. If required that no desktop be installed, set value to: 'NONE'
# Reference1: https://www.baeldung.com/linux/desktop-entry-files
# Reference2: https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html
DesktopEntry = app.desktop

# Optional icon paths. The value may include multiple filenames separated with semicolon or
# given in multi-line form. Valid types are SVG, PNG and ICO (ignored on Linux). Note that the
# inclusion of a scalable SVG is preferable on Linux, whereas PNGs must be one of the standard
# sizes and MUST include the size in the filename in the form: 'name.32.png' or name.32x32.png'.
# Example: Assets/app.svg;Assets/app.24x24.png;Assets/app.32x32.png;Assets/app.ico
Icons =

# Path to AppStream metadata file. It is optional, but recommended as it is used by software centers.
# The file content may embed supported macros such as, such as ${APP_FRIENDLY_NAME} and ${APP_ID} etc.
# to assist in automating fields. Refer: https://docs.appimage.org/packaging-guide/optional/appstream.html
# Example: Assets/metainfo.xml.
MetaInfo = app.metainfo.xml

########################################
# DOTNET PUBLISH
########################################

# Optional path relative to this file in which to find the dotnet project (.csproj)
# or solution (.sln) file, or the directory containing it. If empty (default), a single
# project or solution file is expected under the same directory as this file.
# IMPORTANT. If set to 'NONE', dotnet publish is disabled (not called).
# Instead, only DotnetPostPublish is called. Example: Source/MyProject
DotnetProjectPath = HelloWorld

# Optional arguments supplied to 'dotnet publish'. Do NOT include '-r' (runtime), app version,
# or '-c' (configuration) here as they will be added (i.e. via AppVersionRelease).
# Typically you want as a minimum: '-p:Version=${APP_VERSION} --self-contained true'. Additional
# useful arguments include: '-p:DebugType=None -p:DebugSymbols=false -p:PublishSingleFile=true
# -p:PublishTrimmed=true -p:TrimMode=link'.
# Refer: https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish
DotnetPublishArgs = -p:Version=${APP_VERSION} --self-contained true -p:DebugType=None -p:DebugSymbols=false

# Post-publish (or standalone build) commands on Linux (ignored on Windows). Multiple commands
# may be specifed, separated by semicolon or given in multi-line form. They are called after
# dotnet publish, but before the final output is built. This could, for example, copy additional
# files into the build directory. The working directory will be the location of this file.
# This value is optional, but becomes mandatory if DotnetProjectPath equals 'NONE'.
DotnetPostPublish =

########################################
# PACKAGE OUTPUT
########################################

# Output directory, or subdirectory relative to this file. It will be created if it does not
# exist and will contain the final package output files. If empty, it defaults to the location
# of this file. Default: Deploy
OutputDirectory = Deploy

# Boolean which sets whether to include the application version in the filename of the output
# package (i.e. 'HelloWorld-1.2.3-x86_64.AppImage'). It is ignored if the output filename
# is specified at command line.
OutputVersion = false

########################################
# APPIMAGE OPTIONS
########################################

# Additional arguments for use with appimagetool. Useful for signing. Default is empty.
# See appimagetool --help. Example: --sign
AppImageArgs =

########################################
# FLATPAK OPTIONS
########################################

# The runtime platform. Invariably for .NET (inc. Avalonia), this should be
# 'org.freedesktop.Platform'.
# Refer: https://docs.flatpak.org/en/latest/available-runtimes.html
FlatpakPlatformRuntime = org.freedesktop.Platform

# The platform SDK. Invariably for .NET (inc. Avalonia applications) this should
# be 'org.freedesktop.Sdk'. The SDK must be installed on the build system.
FlatpakPlatformSdk = org.freedesktop.Sdk

# The platform runtime version. The latest available version may change periodically.
# Refer to Flatpak documentation. Example: 22.08
FlatpakPlatformVersion = 22.08

# Flatpak manifest 'finish-args' sandbox permissions. Optional, but if empty, the
# application will have extremely limited access to the host environment. This
# option may be used to grant required application permissions. Values here should
# be prefixed with '--' and separated by semicolon or given in multi-line form.
# Permissive example: --socket=wayland;--socket=x11;--filesystem=host;--share=network
# Less permissive: --socket=wayland;--socket=x11;--filesystem=home
# Refer: https://docs.flatpak.org/en/latest/sandbox-permissions.html
FlatpakFinishArgs = """
    --socket=wayland
    --socket=x11
    --filesystem=host
    --share=network
"""

# Additional arguments for use with flatpak-builder. Useful for signing. Default is empty.
# See flatpak-builder --help. Example: --gpg-keys=FILE
FlatpakBuilderArgs =